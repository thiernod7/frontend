# Cline Rules - √âcole Management Frontend

## üéØ **PHILOSOPHIE : "FEATURE-FIRST & SIMPLICIT√â"**

### **Principe fondamental**
- Une feature = un dossier complet et autonome
- D√©veloppement rapide et it√©ratif
- Simple d'abord, complexification si n√©cessaire
- Feedback utilisateur constant

---

## üèóÔ∏è **ARCHITECTURE & STACK TECHNIQUE**

### **Stack obligatoire**
- **React 19** + **TypeScript** + **Vite**
- **Tailwind CSS** uniquement (0% CSS custom)
- **React Query** pour les donn√©es serveur
- **React Hook Form** + **Zod** pour les formulaires
- **Axios** pour les appels API

### **Structure des dossiers**
```
src/
‚îú‚îÄ‚îÄ features/           # Organisation par fonctionnalit√© m√©tier
‚îÇ   ‚îú‚îÄ‚îÄ auth/          # Authentification
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ api.ts     # API calls + hooks React Query
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ types.ts   # Types sp√©cifiques √† l'auth
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ components/ # Composants auth (LoginForm, etc.)
‚îÇ   ‚îú‚îÄ‚îÄ students/      # Gestion des √©l√®ves
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ api.ts
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ types.ts
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ components/
‚îÇ   ‚îî‚îÄ‚îÄ classes/       # Gestion des classes
‚îú‚îÄ‚îÄ shared/            # Code partag√© entre features
‚îÇ   ‚îú‚îÄ‚îÄ components/    # UI g√©n√©rique (Button, Modal, etc.)
‚îÇ   ‚îú‚îÄ‚îÄ hooks/         # Hooks utilitaires
‚îÇ   ‚îú‚îÄ‚îÄ utils/         # Fonctions utilitaires
‚îÇ   ‚îî‚îÄ‚îÄ types/         # Types partag√©s
‚îú‚îÄ‚îÄ app/               # Configuration globale
‚îÇ   ‚îú‚îÄ‚îÄ router.tsx     # Configuration des routes
‚îÇ   ‚îî‚îÄ‚îÄ providers.tsx  # Providers globaux
‚îî‚îÄ‚îÄ pages/             # Pages qui assemblent les features
```

---

## üìã **WORKFLOW DE D√âVELOPPEMENT**

### **üöÄ D√©veloppement d'une nouvelle feature (2h max)**

#### **Phase 1 : Investigation Backend (10 min)**
1. **Analyser l'API** : Identifier les endpoints dans `../backend/app/domains/`
2. **Comprendre les donn√©es** : Examiner les mod√®les et schemas Pydantic
3. **Lister les erreurs** : Conna√Ætre les erreurs m√©tier possibles

#### **Phase 2 : Setup Frontend (20 min)**
1. **Cr√©er la structure** :
   ```bash
   src/features/nom-feature/
   ‚îú‚îÄ‚îÄ api.ts       # Endpoints + hooks React Query
   ‚îú‚îÄ‚îÄ types.ts     # Types TypeScript (copie des schemas backend)
   ‚îî‚îÄ‚îÄ components/  # Composants de la feature
   ```

2. **D√©finir les types** : Copier/adapter les types du backend
3. **Cr√©er les hooks API** : Un hook par endpoint principal

#### **Phase 3 : D√©veloppement UI (90 min)**
1. **Composants simples** : Formulaires, listes, d√©tails
2. **Assembly** : Cr√©er la page qui utilise les composants
3. **Test en temps r√©el** : V√©rifier avec le serveur de dev

#### **Phase 4 : Finalisation (10 min)**
1. **Routing** : Ajouter les routes dans `app/router.tsx`
2. **Documentation** : Mettre √† jour STATUS.md
3. **Next !** : Passer √† la feature suivante

---

## üé® **CONVENTIONS DE NOMMAGE**

### **Fichiers et dossiers**
- **Features** : `kebab-case` (ex: `student-management/`)
- **Composants** : `PascalCase` (ex: `StudentForm.tsx`)
- **Hooks** : `camelCase` avec pr√©fixe `use` (ex: `useStudents.ts`)
- **Types** : `PascalCase` avec pr√©fixe `T` (ex: `TStudent`)

### **Variables et fonctions**
- **Variables/fonctions** : `camelCase`
- **Constantes** : `UPPER_SNAKE_CASE`
- **Interfaces** : `PascalCase` avec pr√©fixe `I` (ex: `IApiResponse`)

---

## üö´ **R√àGLES STRICTES**

### **INTERDICTIONS**
- ‚ùå **CSS personnalis√©** : 100% Tailwind uniquement
- ‚ùå **UUIDs en dur** : Toujours utiliser des s√©lecteurs dynamiques
- ‚ùå **Logique m√©tier dans les composants** : Extraire dans des hooks
- ‚ùå **Appels API directs** : Toujours passer par React Query
- ‚ùå **Sur-architecture** : Pas de patterns complexes sans besoin r√©el

### **OBLIGATIONS**
- ‚úÖ **Types stricts** : Tout doit √™tre typ√©
- ‚úÖ **Gestion d'erreurs** : Toujours pr√©voir les cas d'√©chec
- ‚úÖ **Feedback utilisateur** : Loading, success, error states
- ‚úÖ **Mobile-first** : Responsive design obligatoire
- ‚úÖ **Accessibilit√©** : Utiliser les bons √©l√©ments HTML

---

## üîß **GESTION DES DONN√âES**

### **√âtat serveur (React Query)**
```typescript
// ‚úÖ Bon : Hook avec React Query
export function useStudents() {
  return useQuery({
    queryKey: ['students'],
    queryFn: () => api.get('/students'),
    staleTime: 5 * 60 * 1000, // 5 min
  });
}

// ‚ùå √âviter : Store Zustand sauf besoin sp√©cifique
```

### **√âtat local (useState)**
- Formulaires : React Hook Form
- √âtat UI temporaire : useState
- √âtat partag√© simple : useState + props

### **√âtat global (Zustand - si vraiment n√©cessaire)**
- Authentification utilisateur
- Pr√©f√©rences globales
- Donn√©es partag√©es entre features distinctes

---

## üéØ **GESTION DES ERREURS**

### **Strat√©gie d'erreur**
1. **Intercepteur Axios** : Gestion centralis√©e des erreurs HTTP
2. **Error Boundaries** : Capture des erreurs React
3. **Toast notifications** : Feedback utilisateur imm√©diat
4. **Fallback UI** : Interface de secours pour les erreurs

### **Types d'erreurs**
- **R√©seau** : Connexion, timeout
- **Authentification** : Token expir√©, acc√®s refus√©
- **Validation** : Donn√©es incorrectes
- **M√©tier** : R√®gles business (ex: capacit√© classe d√©pass√©e)

---

## üì± **DESIGN & UX**

### **Principes UI**
- **Mobile-first** : Commencer par la version mobile
- **Design system** : Composants coh√©rents et r√©utilisables
- **Accessibility** : Labels, contraste, navigation clavier
- **Performance** : Lazy loading, optimisations images

### **Couleurs & th√®me**
```javascript
// Palette principale (√† d√©finir dans tailwind.config.js)
primary: 'indigo',    // Actions principales
secondary: 'gray',    // Actions secondaires
success: 'green',     // Succ√®s
warning: 'yellow',    // Avertissements
error: 'red',         // Erreurs
```

---

## üöÄ **D√âPLOIEMENT & MAINTENANCE**

### **Checklist avant commit**
- [ ] Types TypeScript valid√©s
- [ ] Tests manuels r√©alis√©s
- [ ] Pas d'erreurs ESLint
- [ ] STATUS.md mis √† jour
- [ ] Responsive test√©

### **Strat√©gie de release**
1. **Feature branches** : D√©veloppement isol√©
2. **Review rapide** : Validation fonctionnelle
3. **Merge main** : D√©ploiement automatique
4. **Feedback utilisateur** : Ajustements rapides

---

## üìà **M√âTRIQUES DE QUALIT√â**

### **Objectifs de performance**
- **Bundle size** : < 500KB gzipp√©
- **First paint** : < 2s
- **Interactive** : < 3s
- **Accessibilit√©** : Score > 90%

### **Standards de code**
- **Type coverage** : 100%
- **ESLint errors** : 0
- **Console warnings** : 0 en production

---

*Ces r√®gles √©voluent avec le projet. L'important est la livraison de valeur rapide et la satisfaction utilisateur.*
